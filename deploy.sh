#!/bin/bash

# -----------------------------------------------------------------------------
# Zero-Downtime Deployment Script –¥–ª—è Laravel + Vue2
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Blue-Green —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
# -----------------------------------------------------------------------------

set -e

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCRIPT_START_TIME=$(date +%s)
LOG_FILE="deployment_$(date +%Y%m%d_%H%M%S).log"
BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
HEALTH_CHECK_TIMEOUT=120
MIGRATION_TIMEOUT=300

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
exec > >(tee -a "$LOG_FILE")
exec 2>&1

echo "üöÄ –ù–ê–ß–ò–ù–ê–ï–ú ZERO-DOWNTIME DEPLOYMENT"
echo "üìù –õ–æ–≥: $LOG_FILE"
echo "‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)"

# --- –§–£–ù–ö–¶–ò–ò ---

log_step() {
    local step_name="$1"
    echo ""
    echo "‚ñ∂Ô∏è  [$step_name] $(date)"
    echo "----------------------------------------"
}

check_prerequisites() {
    log_step "–ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
    set -a
    if [ -f .env ]; then
        source .env
    else
        echo "‚ùå ERROR: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        exit 1
    fi
    set +a

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if [ -z "$MYSQL_ROOT_PASSWORD" ] || [ -z "$MYSQL_PASSWORD" ] || [ -z "$MYSQL_DATABASE" ]; then
        echo "‚ùå ERROR: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã
    DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$DISK_USAGE" -gt 85 ]; then
        echo "‚ö†Ô∏è  WARNING: –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (${DISK_USAGE}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    echo "‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
}

save_current_state() {
    log_step "–°–û–•–†–ê–ù–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    CURRENT_BACKEND_ID=$(docker compose ps -q backend 2>/dev/null || echo "")
    CURRENT_FRONTEND_ID=$(docker compose ps -q frontend 2>/dev/null || echo "")
    CURRENT_NGINX_ID=$(docker compose ps -q nginx 2>/dev/null || echo "")

    echo "Backend ID: $CURRENT_BACKEND_ID"
    echo "Frontend ID: $CURRENT_FRONTEND_ID"
    echo "Nginx ID: $CURRENT_NGINX_ID"

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î
    if [ ! -z "$CURRENT_BACKEND_ID" ]; then
        echo "üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        docker compose exec -T mysql mysqldump -u root -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE > "$BACKUP_FILE" || {
            echo "‚ö†Ô∏è  WARNING: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å backup –ë–î"
        }
        echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $BACKUP_FILE"
    fi

    echo "‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
}

rollback() {
    log_step "–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ö–ê–¢–ê"

    echo "üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø—É—â–µ–Ω—ã
    docker compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans || true

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º maintenance mode
    if [ ! -z "$CURRENT_BACKEND_ID" ]; then
        docker start $CURRENT_BACKEND_ID || true
        sleep 5
        docker exec $CURRENT_BACKEND_ID php artisan up || true
    fi

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å backup
    if [ -f "$BACKUP_FILE" ] && [ ! -z "$CURRENT_BACKEND_ID" ]; then
        echo "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."
        docker compose exec -T mysql mysql -u root -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE < "$BACKUP_FILE" || true
    fi

    send_notification "–û–®–ò–ë–ö–ê" "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç"
    echo "‚ùå –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
    exit 1
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
trap rollback ERR

build_new_images() {
    log_step "–°–ë–û–†–ö–ê –ù–û–í–´–• –û–ë–†–ê–ó–û–í"

    echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker compose -f docker-compose.yml -f docker-compose.prod.yml pull

    echo "üõ†Ô∏è  –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker compose -f docker-compose.yml -f docker-compose.prod.yml build --parallel backend frontend scheduler

    echo "‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
}

start_new_containers() {
    log_step "–ó–ê–ü–£–°–ö –ù–û–í–´–• –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-app}_new"

    echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'new'..."
    docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans

    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    NEW_BACKEND_ID=$(docker compose -f docker-compose.yml -f docker-compose.prod.yml ps -q backend)
    NEW_FRONTEND_ID=$(docker compose -f docker-compose.yml -f docker-compose.prod.yml ps -q frontend)

    echo "–ù–æ–≤—ã–π Backend ID: $NEW_BACKEND_ID"
    echo "–ù–æ–≤—ã–π Frontend ID: $NEW_FRONTEND_ID"

    echo "‚úÖ –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

check_new_containers_health() {
    log_step "–ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ù–û–í–´–• –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"

    local max_attempts=$((HEALTH_CHECK_TIMEOUT / 3))
    local attempt=1

    echo "‚åõ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–º–∞–∫—Å–∏–º—É–º $HEALTH_CHECK_TIMEOUT —Å–µ–∫—É–Ω–¥)..."

    while [ $attempt -le $max_attempts ]; do
        echo "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
        if ! docker compose -f docker-compose.yml -f docker-compose.prod.yml ps backend | grep -q "Up"; then
            echo "‚ùå Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            sleep 3
            attempt=$((attempt + 1))
            continue
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP –≤ –Ω–æ–≤–æ–º backend
        if docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php -v > /dev/null 2>&1; then
            echo "‚úÖ PHP —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ–≤–æ–º backend"
        else
            echo "‚ùå PHP –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –Ω–æ–≤–æ–º backend"
            sleep 3
            attempt=$((attempt + 1))
            continue
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php artisan tinker --execute="DB::connection()->getPdo(); echo 'DB OK';" 2>/dev/null | grep -q "DB OK"; then
            echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            echo "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"
            sleep 3
            attempt=$((attempt + 1))
            continue
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –æ—Ç–≤–µ—Ç (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π)
        if docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend curl -f http://localhost:9000 > /dev/null 2>&1; then
            echo "‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
            break
        else
            echo "‚ùå HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi

        sleep 3
        attempt=$((attempt + 1))
    done

    if [ $attempt -gt $max_attempts ]; then
        echo "‚ùå ERROR: –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ $HEALTH_CHECK_TIMEOUT —Å–µ–∫—É–Ω–¥"
        docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=20 backend
        return 1
    fi

    echo "‚úÖ –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
}

run_migrations() {
    log_step "–í–´–ü–û–õ–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô"

    echo "üõ†Ô∏è  –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ä–æ–º backend..."
    if [ ! -z "$CURRENT_BACKEND_ID" ]; then
        docker exec $CURRENT_BACKEND_ID php artisan down --render="errors::503" --retry=60 || true
    fi

    echo "–í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤–æ–º backend..."
    timeout $MIGRATION_TIMEOUT docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php artisan migrate --force || {
        echo "‚ùå ERROR: –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å"
        return 1
    }

    echo "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php artisan optimize:clear
    docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php artisan config:cache
    docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php artisan route:cache
    docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T backend php artisan view:cache

    echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
}

switch_traffic() {
    log_step "–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–†–ê–§–ò–ö–ê"

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π nginx –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx —Å –Ω–æ–≤—ã–º–∏ upstream'–∞–º–∏
    export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME/_new/}"

    echo "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    if [ ! -z "$CURRENT_BACKEND_ID" ]; then
        docker stop $CURRENT_BACKEND_ID $CURRENT_FRONTEND_ID || true
    fi

    echo "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker rename "${COMPOSE_PROJECT_NAME}_new_backend_1" "${COMPOSE_PROJECT_NAME}_backend_1" 2>/dev/null || true
    docker rename "${COMPOSE_PROJECT_NAME}_new_frontend_1" "${COMPOSE_PROJECT_NAME}_frontend_1" 2>/dev/null || true

    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º nginx..."
    docker compose restart nginx

    echo "‚úÖ –¢—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
}

final_health_check() {
    log_step "–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê"

    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞..."
    local attempt=1
    local max_attempts=10

    while [ $attempt -le $max_attempts ]; do
        if curl -f -s http://localhost/ > /dev/null 2>&1; then
            echo "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!"
            break
        else
            echo "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            sleep 2
            attempt=$((attempt + 1))
        fi
    done

    if [ $attempt -gt $max_attempts ]; then
        echo "‚ùå ERROR: –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
        docker compose logs --tail=10 nginx
        return 1
    fi

    # –í–∫–ª—é—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    docker compose exec -T backend php artisan up

    echo "–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker compose ps

    echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

cleanup() {
    log_step "–û–ß–ò–°–¢–ö–ê"

    echo "üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    if [ ! -z "$CURRENT_BACKEND_ID" ]; then
        docker rm $CURRENT_BACKEND_ID $CURRENT_FRONTEND_ID 2>/dev/null || true
    fi

    echo "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker image prune -f

    echo "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ backup'—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)..."
    ls -t backup_*.sql 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true

    echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

send_notification() {
    local status="$1"
    local message="$2"

    # Telegram
    if [ ! -z "$TELEGRAM_BOT_TOKEN" ] && [ ! -z "$TELEGRAM_CHAT_ID" ]; then
        curl -s "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "text=üöÄ Zero-Downtime Deployment: $status\n$message" 2>/dev/null || true
    fi
}

# --- –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ---

main() {
    check_prerequisites
    save_current_state
    build_new_images
    start_new_containers
    check_new_containers_health
    run_migrations
    switch_traffic
    final_health_check
    cleanup

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    DEPLOYMENT_TIME=$(($(date +%s) - SCRIPT_START_TIME))
    echo ""
    echo "üéâ ZERO-DOWNTIME DEPLOYMENT –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!"
    echo "‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${DEPLOYMENT_TIME} —Å–µ–∫—É–Ω–¥"
    echo "üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $LOG_FILE"

    send_notification "–£–°–ü–ï–®–ù–û" "Zero-downtime —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${DEPLOYMENT_TIME} —Å–µ–∫—É–Ω–¥"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main

echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"