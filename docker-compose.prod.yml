services:
  mysql:
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - /var/lib/mysql_prod:/var/lib/mysql
    networks:
      - app-network

  redis:
    volumes:
      - redis_prod_data:/data
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: php-fpm
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: https://grid.lk.cool
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: "3306"
      DB_DATABASE: laravel_db
      DB_USERNAME: laravel_user
      DB_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - laravel_storage_prod:/var/www/storage
      - laravel_bootstrap_cache_prod:/var/www/bootstrap/cache
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    restart: unless-stopped

  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      APP_URL: https://grid.lk.cool
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: "3306"
      DB_DATABASE: laravel_db
      DB_USERNAME: laravel_user
      DB_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - laravel_storage_prod:/var/www/storage
      - laravel_bootstrap_cache_prod:/var/www/bootstrap/cache
    depends_on:
      - mysql
      - redis
      - backend
    networks:
      - app-network
    command: php artisan schedule:work
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      NODE_ENV: production
      NITRO_HOST: 0.0.0.0
      NITRO_PORT: 3000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./backend/public:/var/www/public
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: project_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  redis_prod_data:
    driver: local
  laravel_storage_prod:
    driver: local
  laravel_bootstrap_cache_prod:
    driver: local

networks:
  app-network:
    driver: bridge