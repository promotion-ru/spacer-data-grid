# -----------------------------------------------------------------------------
# Этап 1: Сборка зависимостей (Builder)
# -----------------------------------------------------------------------------
FROM php:8.4-fpm AS builder

# Установка системных зависимостей, необходимых для сборки и PHP расширений
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    unzip \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    # Установка расширений PHP
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    opcache \
    intl \
    zip \
    # Очистка
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Устанавливаем рабочую директорию
WORKDIR /var/www

# Копируем файлы composer для кеширования зависимостей
COPY composer.json composer.lock ./

# Устанавливаем Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Устанавливаем зависимости, не запуская скрипты (файла artisan еще нет)
RUN composer install \
    --no-dev \
    --no-interaction \
    --no-plugins \
    --no-scripts \
    --prefer-dist \
    --optimize-autoloader

# Теперь копируем остальной код приложения
COPY . .

# Выполняем скрипты Composer и кэширование Laravel для production
RUN composer dump-autoload --optimize \
    && php artisan package:discover --ansi \
    && php artisan event:cache \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache


# -----------------------------------------------------------------------------
# Этап 2: Финальный образ для Production
# -----------------------------------------------------------------------------
FROM php:8.4-fpm

# Устанавливаем только runtime библиотеки, нужные в production
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libicu-dev \
    libzip-dev \
    libfcgi-bin \
    procps \
    # Очистка
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Используем рекомендуемую production конфигурацию PHP
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Копируем кастомные конфигурационные файлы PHP и PHP-FPM
# Убедитесь, что эти файлы существуют в вашей структуре проекта (например, ./docker/php-fpm/)
COPY ./docker/php-fpm/opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY ./docker/php-fpm/php-custom.ini /usr/local/etc/php/conf.d/php-custom.ini
COPY ./docker/php-fpm/php-fpm-pool.conf /usr/local/etc/php-fpm.d/www.conf
COPY ./docker/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Копируем PHP расширения и библиотеки из builder этапа
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/

# Копируем скомпилированное приложение из builder этапа
COPY --from=builder /var/www /var/www

# Устанавливаем рабочую директорию
WORKDIR /var/www

# Создаем символическую ссылку для storage ПЕРЕД сменой пользователя
RUN php artisan storage:link

# Устанавливаем правильные права доступа.
# Storage и cache будут управляться Docker-томами, но права должны быть верными
# для первоначального создания и для файлов, которые не в томах.
# chown должен идти перед USER www-data
RUN chown -R www-data:www-data /var/www

# Переключаемся на непривилегированного пользователя
USER www-data

# Запускаем entrypoint, который будет выполнять CMD
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Открываем порт для PHP-FPM
EXPOSE 9000

# Команда по умолчанию для запуска PHP-FPM
CMD ["php-fpm"]
