# Production Dockerfile для Laravel приложения
# Исправленная версия с правильными правами доступа

# Stage 1: Build environment and Composer dependencies
FROM php:8.4-fpm AS builder

# Установка системных зависимостей и PHP расширений для Laravel
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    unzip \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libcurl4-openssl-dev \
    libicu-dev \
    libzip-dev \
    && docker-php-ext-install -j$(nproc) \
    pdo_mysql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    opcache \
    intl \
    zip \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /var/www

COPY composer.json composer.lock ./

# Установка Composer и зависимостей
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist

COPY . .

RUN composer dump-autoload --optimize \
    && php artisan package:discover --ansi

# Stage 2: Production environment
FROM php:8.4-fpm

# Устанавливаем только runtime библиотеки, нужные в production
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libicu-dev \
    libzip-dev \
    libfcgi-bin \
    procps \
    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Скачиваем и устанавливаем скрипт health check для php-fpm
RUN curl -o /usr/local/bin/php-fpm-healthcheck \
    https://raw.githubusercontent.com/renatomefi/php-fpm-healthcheck/master/php-fpm-healthcheck \
    && chmod +x /usr/local/bin/php-fpm-healthcheck

# Копируем скрипт инициализации
COPY ./docker/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Копируем начальную структуру storage
COPY ./storage /var/www/storage-init

# Копируем PHP расширения и библиотеки из builder этапа
COPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/
COPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/
COPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/

# Используем рекомендуемую production конфигурацию PHP
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Копируем конфигурационные файлы PHP и PHP-FPM
COPY ./docker/php-fpm/opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY ./docker/php-fpm/php-custom.ini /usr/local/etc/php/conf.d/php-custom.ini
COPY ./docker/php-fpm/php-fpm-pool.conf /usr/local/etc/php-fpm.d/www.conf

# Копируем код приложения и зависимости из build этапа
COPY --from=builder /var/www /var/www

WORKDIR /var/www

# КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ: Создаем все директории с правильными правами сразу
RUN mkdir -p /var/www/storage/app/public \
    && mkdir -p /var/www/storage/framework/sessions \
    && mkdir -p /var/www/storage/framework/views \
    && mkdir -p /var/www/storage/framework/cache/data \
    && mkdir -p /var/www/storage/framework/cache/repository \
    && mkdir -p /var/www/storage/logs \
    && mkdir -p /var/www/bootstrap/cache \
    && touch /var/www/storage/logs/laravel.log \
    && chown -R www-data:www-data /var/www \
    && chmod -R 775 /var/www/storage \
    && chmod -R 775 /var/www/bootstrap/cache \
    && chmod 664 /var/www/storage/logs/laravel.log

# ПЕРЕКЛЮЧАЕМСЯ на www-data ПОСЛЕ установки всех прав
USER www-data

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
EXPOSE 9000
CMD ["php-fpm"]
